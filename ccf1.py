# -*- coding: utf-8 -*-
"""ccf1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aWSJIDGuf8Jmt_dqGrXONftVUoRBNBJC
"""

import numpy as nu
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# loading the dataset to pandas dataframe
credit_card_data = pd.read.csv('/content/creditcard.csv')

credit_card_data = pd.read_csv('/content/creditcard.csv')

credit_card_data.head()

credit_card_data.tail()

#dataset inf0
credit_card_data.info()

# checking the number of missing values in each cloumn
credit_card_data.isnull().sum()

#distribution of legit transactions and fraudulent transactions
credit_card_data['Class'].value_counts()

"""this data set is highly unbalanced

"""

# seperating the data for analysis
legit = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]

print(legit.shape)
print(fraud.shape)

#statistical measures of the data
legit.amount.describe()

legit.Amount.describe()

fraud .Amount.describe()

"""to predict if the transaction is legit or fraudulent"""

# compare the values for both transactions
credit_card_data.groupby('Class').mean()

# building a sample dataset containing similar distribution odf normal transctions and f t
legit_sample = legit.sample(n=492)

# concatinating 2 data frames
new_dataset = pd.concat((legit_sample, fraud), axis=0)
#axis 0 is rows    axis 1 is column

"""random values"""

new_dataset.head()

new_dataset.tail()

"""uniformely distributed data of 492 legit and fraudulent transactions"""

new_dataset['Class'].value_counts()

"""to check whether we got a good sample or a bad sample"""

new_dataset.groupby('Class').mean()

#splittin the data into fratures and targets
X = new_dataset.drop(columns='Class', axis=1)
Y = new_dataset['Class'']

X = new_dataset.drop(columns='Class', axis=1)
Y = new_dataset['Class']

print(X)

print(Y)

#split the data into training data and testing data
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""model training using logistic regression model with training data"""

model = LogisticRegression()

model.fit(X_train, Y_train)

#model evaluation
#accuracy score
# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

"""out of 100 predictions our model can predict the accuracy up to %"""

print('accuracy on training data : ', training_data_accuracy)

# accuracy on test data 
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('accuracy of testing data : ', test_data_prediction)

print('accuracy of testing data : ', test_data_accuracy)

"""if the accuracy score on training data and testing data dont match this the data is said to be overfitted or underfitted"""

